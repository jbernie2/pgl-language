PGL - probablistic grammar language

// example of PGL
define terminals
{
	// for now terminals can only be strings, but they will eventually be
	// able to reference java functons
	a = "a";
	b = "b";
	c = "c";
}
define non-terminals
{
	A -> B(60)|C B (40) | e;
	B -> a b;
	C -> c;
}

// to parse create table of terminals and non-terminals
// and then generate the java code, 
// there will be a function for each terminal and non terminal

// parsing grammer
S -> define-terminals define-nonterminals
define-terminal -> define terminals { t-definitionList }
define-nonterminals -> define non-terminals { nt-definitionList } 

t-definitionList -> t-definition t-definitionList | e
t-definition -> t-name '=' '"' value '"' ';'

nt-definitionList -> nt-definition nt-definitionList | e
nt-definition -> nt-name '->' nt-expression ';' | e
nt-expression -> production productionList

production -> expression expressionList
productionList -> '|' productionList | e

expression -> nt-name ( num )
expressionList -> expression expressionList | e



//example of the java code that will be generated from the grammar
A(production[] args)
{
	generate random between 1 and 100
	if
		0 to arg[0].prob
		arg[0].func()
	else if
		arg[0].prob to arg[0].prob+arg[1].prob
		arg[1].func
}

